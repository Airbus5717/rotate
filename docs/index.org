#+TITLE: Rotate Programming Language
#+OPTIONS: num:nil html-style:nil timestamp:nil date:nil author:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="solarized-min.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css"/>

#+begin_center
The Syntax is subject to change at any time
#+end_center

* Project Link
[[https://github.com/Airbus5717/rotate.git][Github repo]]


* Basics
** Hello World
#+include: "../test/001_hello.vr" src cpp

** Comments
#+include: "../test/003_comments.vr" src cpp

* Syntax Overview
** Basic variables
#+include: "../test/002_var.vr" src cpp

** If Else
#+include: "../test/006_if.vr" src cpp

** Loop
#+include: "../test/007_loops.vr" src cpp

** Switch
#+begin_src cpp
x :: 1;
    // every case break is the default
switch x {
    1: {}
    2: {}
    else:{}
}
#+end_src
** Struct
#+begin_src cpp

Token :: struct {
    x: int,
    y: [3]int,
}


d := Token{1, [1, 2, 3]};
d.x = 2;
d.y[1] = 1;
#+end_src

** Function
#+include: "../test/004_func.vr" src cpp

** Enums
#+begin_src cpp
// no size specification

TknType :: enum {
    Id,
    Number,
    Float,
    String,
    Char,
    Invalid,
}
#+end_src

** Memory managment
similar to C, with some modern features (new/delete and defer)
#+begin_src cpp
io :: import("std/io");
os :: import("std/os");

str := new [3]char;
defer delete str;

x := new [100]int;
tkn := new Token; // assuming Token is a struct
defer delete tkn;
defer delete x;

// how to check for failed allocation
if x == nil {
    io.println("Fail alloc");
    os.exit(1);
}
#+end_src


* TODO
** Compiler
- Parser 30% done
- TypeChecker 10% done
- Analysis
- Optimization
- CodeGen

** DOCS
- Add a copy button in HTML docs export 
- Add automation to docs generation
- Custom syntax highlighting for rotate
